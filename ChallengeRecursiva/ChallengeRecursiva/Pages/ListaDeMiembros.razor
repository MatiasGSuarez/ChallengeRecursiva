@page "/ListaDeMiembros"
@using ChallengeRecursiva.Services
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Model

@inject SocioService SociosService
@inject NavigationManager NavManager


<div class="container mt-5">
    <div class="mt-3 mb-3">
        <SfCard>
            <CardHeader Title="SUPERLIGA" />
            <CardContent>
                <p>
                    Total de Socios Registrados: @(totalSocios)
                </p>

                <p>
                    Promedio de edad de socios de RACING: @(promedioEdadSociosRacing) 
                </p>

                <p>
                    Cinco nombres mas comunes entre los hinchas de River:
                    <ul>
                        @foreach (var nombre in nombresMasComunesHinhasDeRiver)
                        {
                            <li>@nombre</li>  <!-- Mostrar cada nombre -->
                        }
                    </ul>
                </p>
        
            </CardContent>
            <div class="d-flex align-content-center">
                <button type="button" class="btn btn-primary mb-2" @onclick="CargarTotalSocios" >Cargar Datos</button>
            </div>
            
        </SfCard>
    </div>
    <SfGrid ID="Grid" 
            @ref="@Grid"
            TValue="SocioDTO"
            AllowPaging="true"
            AllowSorting="true"
            AllowReordering="true"
            EnableAltRow="true"
            Width="100%">
        <Syncfusion.Blazor.Data.SfDataManager AdaptorInstance="@typeof(CustomAdaptor)" Adaptor="Adaptors.CustomAdaptor"></Syncfusion.Blazor.Data.SfDataManager>
        <GridPageSettings 
            PageSize="10" 
            PageSizes="true">
        </GridPageSettings>
        <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="false" Mode="EditMode.Normal"></GridEditSettings>
        <GridColumns>
            <GridColumn Field=@nameof(SocioDTO.Nombre) HeaderText="Nombre" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(SocioDTO.Edad) HeaderText="Edad" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(SocioDTO.Equipo) HeaderText="Equipo" TextAlign="TextAlign.Center"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>
<style>
    .e-card .e-card-header {
        
        text-align: center
    }
</style>
@code {
    #region Vars

    public static SocioService sociosService;

    private SfGrid<SocioDTO> Grid { get; set; }

    public List<SocioDTO> Customers { get; set; }

    public Query GridQry = new Query();

    public int totalSocios;

    public int promedioEdadSociosRacing;

    public List<string> nombresMasComunesHinhasDeRiver = new List<string>();
    #endregion

    #region Methods

    protected override void OnInitialized()
    {
        Grid = new SfGrid<SocioDTO>();
        sociosService = SociosService;
    }
    private async Task CargarTotalSocios()
    {
        totalSocios = await sociosService.GetTotalSociosAsync();
        promedioEdadSociosRacing = await sociosService.GetPromedioEdadSociosRacingAsync(); 
        nombresMasComunesHinhasDeRiver = await sociosService.GetTop5NombresRiverAsync();
    }

    #endregion

    #region Grilla

    public class CustomAdaptor : DataAdaptor
    {
        public override async Task<object> ReadAsync(DataManagerRequest dm, string key = null)
        {
            try
            {
                var tGridData = await sociosService.Get100SociosAsync(dm);
                return dm.RequiresCounts ? tGridData : (object)tGridData;
            }
            catch (Exception ex)
            {
                return new DataResult();
            }
        }
    }
    #endregion
}
